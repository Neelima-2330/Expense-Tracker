<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Arial:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }

        .dashboard-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            text-align: center;
        }

        .summary-card h3 {
            margin-bottom: 10px;
        }

        .summary-card p {
            font-size: 20px;
            font-weight: bold;
        }

        .income {
            color: #27ae60;
        }

        .expense {
            color: #e74c3c;
        }

        .chart-button-container {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .chart-button {
            padding: 10px 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            background-color: #fff;
            font-size: 16px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .chart-button.active {
            background-color: #3498db;
            color: white;
            border-color: #3498db;
        }

        .chart-button:hover {
            background-color: #eee;
        }

        .chart-container {
            width: 100%;
            max-width: 800px;
            height: 500px;
            margin: 0 auto;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            padding: 15px;
        }

        #overallChartContainer {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 500px;
        }

        #individualChartContainer {
            display: none;
        }

        .button-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .add-button, .transactions-button {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            text-decoration: none;
            color: white;
        }

        .add-button {
            background-color: #007bff;
        }

        .transactions-button {
            background-color: #28a745;
        }

        .add-button:hover, .transactions-button:hover {
            opacity: 0.8;
        }

        @media (max-width: 768px) {
            .dashboard-summary {
                grid-template-columns: 1fr;
            }

            .chart-button-container {
                flex-direction: column;
                align-items: stretch;
            }

            .chart-button {
                width: 100%;
            }

            .chart-container {
                max-width: 100%;
                height: 400px;
            }

            #overallChartContainer {
                height: auto;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Expense Tracker Dashboard</h1>
    <div class="button-container">
        <a href="/add" class="add-button">+ Add New Transaction</a>
        <a href="/transactions" class="transactions-button">View Transactions</a>
    </div>
    <div class="dashboard-summary">
        <div class="summary-card">
            <h3>Total Transactions</h3>
            <p><%= dashboardData.totalTransactions %></p>
        </div>
        <div class="summary-card">
            <h3>Total Income</h3>
            <p class="income">₹<%= dashboardData.totalIncome %></p>
        </div>
        <div class="summary-card">
            <h3>Total Expenses</h3>
            <p class="expense">₹<%= dashboardData.totalExpenses %></p>
        </div>
        <div class="summary-card">
            <h3>Balance</h3>
            <p>₹<%= dashboardData.balance %></p>
        </div>
    </div>
    <div class="chart-button-container">
        <button class="chart-button active" onclick="showOverallChart()">Overall</button>
        <button class="chart-button" onclick="showIndividualChart()">Individual Spendings</button>
    </div>
    <div class="chart-container" id="overallChartContainer">
        <canvas id="overallPieChart" width="400" height="400"></canvas>
    </div>
    <div class="chart-container" id="individualChartContainer">
        <canvas id="individualBarChart" width="900" height="500"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const overallChartContainer = document.getElementById('overallChartContainer');
    const individualChartContainer = document.getElementById('individualChartContainer');
    const overallButton = document.querySelector('.chart-button:first-child');
    const individualButton = document.querySelector('.chart-button:nth-child(2)');

    let overallPieChartInstance = null;
    let individualBarChartInstance = null;

    function showOverallChart() {
        overallChartContainer.style.display = 'flex';
        individualChartContainer.style.display = 'none';
        overallButton.classList.add('active');
        individualButton.classList.remove('active');
        if (individualBarChartInstance) {
            individualBarChartInstance.destroy();
            individualBarChartInstance = null;
        }
        if (!overallPieChartInstance) {
            fetchOverallSummaryData();
        }
    }

    function showIndividualChart() {
        overallChartContainer.style.display = 'none';
        individualChartContainer.style.display = 'block';
        overallButton.classList.remove('active');
        individualButton.classList.add('active');
        if (overallPieChartInstance) {
            overallPieChartInstance.destroy();
            overallPieChartInstance = null;
        }
        if (!individualBarChartInstance) {
            fetchIndividualSpendingDataByTitle();
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        fetchOverallSummaryData();
        showOverallChart();
    });

    function fetchOverallSummaryData() {
        fetch('/api/all-transactions-summary')
            .then(response => response.json())
            .then(data => {
                const pieChartCtx = document.getElementById('overallPieChart').getContext('2d');
                overallPieChartInstance = new Chart(pieChartCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Income', 'Expenses'],
                        datasets: [{
                            data: [data.totalIncome, data.totalExpenses],
                            backgroundColor: ['#2ecc71', '#e74c3c'],
                            hoverBackgroundColor: ['#27ae60', '#c0392b'],
                            borderWidth: 0,
                            spacing: 5,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        cutout: '60%',
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    usePointStyle: true,
                                    boxWidth: 10
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        let label = context.label || '';
                                        if (context.parsed !== null) {
                                            label += ': ₹' + parseFloat(context.parsed).toFixed(2);
                                        }
                                        return label;
                                    }
                                }
                            },
                            title: {
                                display: true,
                                text: 'Overall Income vs Expenses',
                                font: { size: 16 }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching overall transactions summary:', error));
    }

    function fetchIndividualSpendingDataByTitle() {
        fetch('/api/individual-transactions-by-title')
            .then(response => response.json())
            .then(data => {
                const barChartCtx = document.getElementById('individualBarChart').getContext('2d');
                individualBarChartInstance = new Chart(barChartCtx, {
                    type: 'bar',
                    data: {
                        labels: data.titles,
                        datasets: [
                            {
                                label: 'Income (₹)',
                                data: data.incomeAmounts,
                                backgroundColor: '#2ecc71'
                            },
                            {
                                label: 'Expense (₹)',
                                data: data.expenseAmounts,
                                backgroundColor: '#e74c3c'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Amount (₹)',
                                },
                                grid: { display: false }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Transaction Title'
                                },
                                grid: { display: false },
                                ticks: {
                                    autoSkip: false,
                                    maxRotation: 45,
                                    callback: function (value) {
                                        const label = this.getLabelForValue(value);
                                        return label.length > 15 ? label.substring(0, 15) + '...' : label;
                                    }
                                }
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: 'Income and Expenses by Transaction Title'
                            },
                            legend: {
                                position: 'bottom'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        let label = context.dataset.label || '';
                                        if (context.parsed.y !== null) {
                                            label += ': ₹' + parseFloat(context.parsed.y).toFixed(2);
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching individual transactions by title:', error));
    }
</script>
</body>
</html>
